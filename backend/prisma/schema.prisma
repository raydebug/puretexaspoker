// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  email       String    @unique
  password    String
  displayName String
  avatar      String?
  chips       Int       @default(10000)
  gamesPlayed Int       @default(0)
  gamesWon    Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  
  // USER ROLE MANAGEMENT: Enhanced role system
  roleId      String    @default("player") // Default role is player
  role        Role      @relation(fields: [roleId], references: [id])
  isActive    Boolean   @default(true)
  isBanned    Boolean   @default(false)
  bannedBy    String?   // Admin who banned this user
  bannedAt    DateTime?
  banReason   String?
  lastActiveAt DateTime?
  
  // Relation to Player for backwards compatibility
  player      Player?
  
  // USER ROLE MANAGEMENT: Administrative actions
  moderatedBy ModerationAction[] @relation("ModeratedUser")
  moderatorActions ModerationAction[] @relation("ModeratorUser")
}

// USER ROLE MANAGEMENT: Role definitions with hierarchical permissions
model Role {
  id          String   @id @default(uuid())
  name        String   @unique // player, spectator, moderator, administrator
  displayName String   // Human-readable name
  description String?  // Role description
  level       Int      @default(0) // Hierarchy level (0=player, 10=spectator, 50=moderator, 100=admin)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  permissions RolePermission[]
}

// USER ROLE MANAGEMENT: Granular permission system
model Permission {
  id          String   @id @default(uuid())
  name        String   @unique // join_game, place_bet, kick_player, etc.
  displayName String   // Human-readable name
  description String?  // Permission description
  category    String   // game, moderation, administration
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  // Relations
  roles       RolePermission[]
}

// USER ROLE MANAGEMENT: Many-to-many relationship between roles and permissions
model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  
  @@unique([roleId, permissionId])
}

// USER ROLE MANAGEMENT: Moderation actions and audit trail
model ModerationAction {
  id           String   @id @default(uuid())
  type         String   // warn, kick, mute, ban, unban
  reason       String?
  duration     Int?     // Duration in minutes (for temporary actions)
  moderatorId  String   // User who performed the action
  targetUserId String   // User who was moderated
  tableId      String?  // Table where action occurred (if applicable)
  createdAt    DateTime @default(now())
  expiresAt    DateTime?
  isActive     Boolean  @default(true)
  
  moderator    User     @relation("ModeratorUser", fields: [moderatorId], references: [id])
  targetUser   User     @relation("ModeratedUser", fields: [targetUserId], references: [id])
}

model Player {
  id          String        @id @default(uuid())
  nickname    String        // Removed @unique constraint - allow same nickname across different tables
  chips       Int
  table       Int?          // Table ID - null means in lobby
  seat        Int?          // Seat number - null means observing (if table is not null)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String?       @unique // Optional link to User
  user        User?         @relation(fields: [userId], references: [id])
  playerTables PlayerTable[]
  messages    Message[]
  gameActions GameAction[]
}

model Table {
  id          String        @id @default(uuid())
  name        String
  maxPlayers  Int
  smallBlind  Int
  bigBlind    Int
  minBuyIn    Int
  maxBuyIn    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // USER ROLE MANAGEMENT: Table administration
  createdBy   String?       // User who created the table
  isPrivate   Boolean       @default(false)
  password    String?       // Optional table password
  isActive    Boolean       @default(true)
  
  playerTables PlayerTable[]
  games       Game[]
}

model PlayerTable {
  id        String   @id @default(uuid())
  playerId  String
  tableId   String
  seatNumber Int
  buyIn     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  player    Player   @relation(fields: [playerId], references: [id])
  table     Table    @relation(fields: [tableId], references: [id])

  @@unique([tableId, seatNumber])
}

model Game {
  id        String      @id @default(uuid())
  tableId   String
  status    String      @default("waiting")
  pot       Int         @default(0)
  deck      String?     // JSON string of remaining cards
  board     String?     // JSON string of community cards
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  table     Table       @relation(fields: [tableId], references: [id])
  actions   GameAction[]
  cardOrder CardOrder?
}

model GameAction {
  id        String   @id @default(uuid())
  gameId    String
  playerId  String
  type      String   // bet, fold, check, etc.
  amount    Int?     // for bets/raises
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  playerId  String
  createdAt DateTime @default(now())
  player    Player   @relation(fields: [playerId], references: [id])
}

model CardOrder {
  id           String   @id @default(uuid())
  gameId       String   @unique
  seed         String   // Random seed used for shuffling
  cardOrder    String   // JSON string of complete 52-card order
  hash         String   // SHA-256 hash of card order
  isRevealed   Boolean  @default(false) // Whether order is publicly revealed
  createdAt    DateTime @default(now())
  game         Game     @relation(fields: [gameId], references: [id])
} 